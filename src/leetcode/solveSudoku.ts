// 编写一个程序，通过填充空格来解决数独问题。

// 一个数独的解法需遵循如下规则：

// 数字 1-9 在每一行只能出现一次。
// 数字 1-9 在每一列只能出现一次。
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
// 空白格用 '.' 表示。



// 一个数独。



// 答案被标成红色。

// 提示：

// 给定的数独序列只包含数字 1-9 和字符 '.' 。
// 你可以假设给定的数独只有唯一解。
// 给定数独永远是 9x9 形式的。
export function solveSudoku(board: string[][]): void {
  console.log(board);
};

function isValid(board: string[][], i: number, j: number, target: string): boolean {
  for(let k=0; k<9; k++) {
    if(board[i][k] === target) return false;
    if(board[k][j] === target) return false;
    if(board[i/3 * 3 + k%3][j/3 * 3 + k%3] === target) return false;
  }
  return true;
}

const board = [
  ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'],
  ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'],
  ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'],
  ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'],
  ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'],
  ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'],
  ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'],
  ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'],
  ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'],
];